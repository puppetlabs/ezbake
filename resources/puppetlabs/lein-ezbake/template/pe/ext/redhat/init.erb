#!/bin/bash
#
# Puppet Labs <%= EZBake::Config[:project] %>
#
# chkconfig: - 70 10
# description: Puppet Labs <%= EZBake::Config[:project] %>

### BEGIN INIT INFO
# Provides:          <%= EZBake::Config[:project] %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
<% if EZBake::Config[:start_after] -%>
# Should-Start:      <%= EZBake::Config[:start_after].map {|dep| "#{dep}" }.join(" ") %>
# Should-Stop:       <%= EZBake::Config[:start_after].map {|dep| "#{dep}" }.join(" ") %>
<% end -%>
# Short-Description: <%= EZBake::Config[:project] %>
# Description:       Start <%= EZBake::Config[:project] %> daemon placed in /etc/init.d.
### END INIT INFO

# Copyright 2014 Puppet Labs

# Source function library.
. /etc/rc.d/init.d/functions

#set default privileges to -rw-r-----
umask 027

prog="<%= EZBake::Config[:project] %>"
realname="<%= EZBake::Config[:real_name] %>"

##########################################
#  You should not have to edit this init script.
#  Please attempt to make changes in /etc/sysconfig/<%= EZBake::Config[:project] %>
##########################################

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog
[ -e "$INSTALL_DIR/ezbake-functions.sh" ] && . "$INSTALL_DIR/ezbake-functions.sh"

config=$CONFIG

PATH=/sbin:/usr/sbin:/bin:/usr/bin
JARFILE="<%= EZBake::Config[:uberjar_name] %>"
JAVA_ARGS="${JAVA_ARGS} -cp '${INSTALL_DIR}/${JARFILE}' clojure.main -m <%= EZBake::Config[:main_namespace] %> --config ${CONFIG} -b '${BOOTSTRAP_CONFIG}'"
EXTRA_ARGS="--chuid $USER --background --make-pidfile"
lockfile=/var/lock/subsys/$prog
EXEC="$JAVA_BIN -XX:OnOutOfMemoryError=\"kill -9 %p\" -Djava.security.egd=/dev/urandom $JAVA_ARGS"
PIDFILE="/var/run/puppetlabs/${realname}/${realname}"
START_TIMEOUT=${START_TIMEOUT:-<%= EZBake::Config[:start_timeout] %>}

find_my_pid() {
    pid=`pgrep -f "${JARFILE}"`
    if [ ! -d  "/var/run/puppetlabs/${realname}" ] ; then
        mkdir -p /var/run/puppetlabs/${realname}
        chown -R $USER:$GROUP /var/run/puppetlabs/${realname}
    fi
    [ -n "$pid" ] && echo $pid > $PIDFILE
}

start() {
    # call status here and figure out current state
    rh_status_q
    [ -x $JAVA_BIN ] || exit 5
    [ -e $config ] || exit 6
    # Move any heap dumps aside
    echo -n $"Starting $prog: "

    <% if EZBake::Config[:open_file_limit] -%>
    [ -n "$OPEN_FILE_LIMIT" ] && ulimit -n $OPEN_FILE_LIMIT
    <% end -%>

    <% EZBake::Config[:redhat][:pre_start_action].each do |action| -%>
    <%= action %>
    <% end -%>

    pushd "${INSTALL_DIR}" &> /dev/null
    daemon --user $USER --pidfile $PIDFILE "$EXEC >> /var/log/puppetlabs/<%= EZBake::Config[:real_name] %>/<%= EZBake::Config[:real_name] %>-daemon.log 2>&1 &"
    retval=$?
    sleep 1
    popd &> /dev/null
    find_my_pid
    [ -s $PIDFILE ] && success $"$base startup" || failure $"$base startup"
    echo
    [ -s $PIDFILE ] && touch $lockfile

    if [ "$retval" -ne 0 ] \
        || ! wait_for_app $(cat $PIDFILE) $START_TIMEOUT ;then
        failure $"$base startup"
    fi

    <% if not EZBake::Config[:redhat][:post_start_action].empty? -%>
    if [ "$retval" -eq 0 ]; then
    <% EZBake::Config[:redhat][:post_start_action].each do |action| -%>
        <%= action %>
    <% end -%>
    fi
    <% end -%>

    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    find_my_pid

    if [ ! -s "$PIDFILE" ] ; then
        echo $pid > $PIDFILE
    fi

    killproc -p $PIDFILE -d ${SERVICE_STOP_RETRIES}s $prog
    retval=$?

    [ $retval -eq 0 ] && success $"$base stopped" || failure $"$base stopped"
    echo
    [ $retval -eq 0 ] && rm -f $lockfile $PIDFILE
    return $retval
}

restart() {
    stop
    start
}

rh_status() {
    find_my_pid
    status -p $PIDFILE $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

reload() {
    echo -n $"Reloading $prog: "
    killproc -p $PIDFILE $prog -HUP
    RETVAL=$?
    echo
    return $RETVAL
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    reload)
        $1
        ;;
    status)
        rh_status
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart|condrestart|try-restart|reload|status}"
        exit 2
esac
exit $?
